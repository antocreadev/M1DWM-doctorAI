name: Backend CI/CD Pipeline

on:
  push:
    branches: [ main, lancementDB, jobs-deploy ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend.yml'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install flake8
        
    - name: Lint with flake8
      run: |
        cd backend
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || true
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
      
    - name: Set up Google Cloud SDK
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: Configure Docker to use Google Cloud
      run: |
        gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev
        
    - name: Build and push backend Docker image
      run: |
        cd backend
        docker build -t ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/mediassist-images/backend:${{ github.sha }} .
        docker push ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/mediassist-images/backend:${{ github.sha }}
        
        # Tag as latest
        docker tag ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/mediassist-images/backend:${{ github.sha }} \
                  ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/mediassist-images/backend:latest
        docker push ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/mediassist-images/backend:latest

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Set up Google Cloud SDK
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: Deploy to Cloud Run
      uses: google-github-actions/deploy-cloudrun@v1
      with:
        service: mediassist-backend-with-sql
        image: ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/mediassist-images/backend:${{ github.sha }}
        region: ${{ secrets.GCP_REGION }}
        allow_unauthenticated: true
        env_vars: |
          ENVIRONMENT=production
          GOOGLE_CLOUD_PROJECT=${{ secrets.GCP_PROJECT_ID }}
          OLLAMA_HOST=https://ollama-gemma-bv5bumqn3a-ew.a.run.app
          INSTANCE_CONNECTION_NAME=${{ secrets.GCP_PROJECT_ID }}:${{ secrets.GCP_REGION }}:mediassist-db
          DB_USER=postgres
          DB_PASS=mediassist123
          DB_NAME=mediassist
          JWT_SECRET_KEY=ydEyUGomyWUgtelwRYPFOxQfLCN4EBgQGAepKMzRBXg=
          STORAGE_BUCKET=mediassist-prod-files
    
    - name: Post-deployment check
      run: |
        echo "Deployed backend to production environment."
        echo "Running health check..."
        SERVICE_URL=$(gcloud run services describe mediassist-backend-with-sql --region ${{ secrets.GCP_REGION }} --format='value(status.url)')
        if [[ -n "$SERVICE_URL" ]]; then
          echo "Service URL: $SERVICE_URL"
          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" $SERVICE_URL/health || echo "failed")
          if [[ "$STATUS_CODE" == "200" ]]; then
            echo "✅ Health check passed."
          else
            echo "⚠️ Health check returned status $STATUS_CODE. Check logs for details."
          fi
        else
          echo "⚠️ Could not retrieve service URL."
        fi