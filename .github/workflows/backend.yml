name: Backend CI/CD Pipeline

on:
  push:
    branches: [ main, lancementDB, jobs-deploy ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend.yml'

jobs:
  code:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8
        
    - name: Run linters
      run: |
        cd backend
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || true
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: code
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
      
    - name: Set up Google Cloud SDK
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: Configure Docker for GCP
      run: |
        gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev
        
    - name: Build Docker image
      run: |
        cd backend
        docker build -t ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/mediassist-images/backend:${{ github.sha }} .

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: build
    defaults:
      run:
        working-directory: ./backend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install backend dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-flask
        pip install protobuf==3.20.3
    
    - name: Run backend tests
      env:
        PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION: python
      run: |
        python -m pytest test_app.py -v

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Google Cloud SDK
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: Configure Docker for GCP
      run: |
        gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev
        
    - name: Push Docker images
      run: |
        cd backend
        docker build -t ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/mediassist-images/backend:${{ github.sha }} .
        docker push ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/mediassist-images/backend:${{ github.sha }}
        
        # Tag as latest
        docker tag ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/mediassist-images/backend:${{ github.sha }} \
                  ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/mediassist-images/backend:latest
        docker push ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/mediassist-images/backend:latest
        
        echo "::set-output name=image::${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/mediassist-images/backend:${{ github.sha }}"

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: release
    
    steps:
    - name: Set up Google Cloud SDK
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: Deploy to Cloud Run
      uses: google-github-actions/deploy-cloudrun@v1
      with:
        service: mediassist-backend-with-sql
        image: ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/mediassist-images/backend:${{ github.sha }}
        region: ${{ secrets.GCP_REGION }}
        allow_unauthenticated: true
        env_vars: |
          ENVIRONMENT=production
          GOOGLE_CLOUD_PROJECT=${{ secrets.GCP_PROJECT_ID }}
          OLLAMA_HOST=https://ollama-gemma-bv5bumqn3a-ew.a.run.app
          INSTANCE_CONNECTION_NAME=${{ secrets.GCP_PROJECT_ID }}:${{ secrets.GCP_REGION }}:mediassist-db
          DB_USER=postgres
          DB_PASS=mediassist123
          DB_NAME=mediassist
          JWT_SECRET_KEY=ydEyUGomyWUgtelwRYPFOxQfLCN4EBgQGAepKMzRBXg=
          STORAGE_BUCKET=mediassist-prod-files
    
  operate:
    name: Operate
    runs-on: ubuntu-latest
    needs: deploy
    
    steps:
    - name: Service Health Check
      run: |
        echo "Running post-deployment health check..."
        sleep 30  # Give the service a moment to stabilize
        URL="https://mediassist-backend-with-sql-bv5bumqn3a-ew.a.run.app/health"
        STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" $URL || echo "failed")
        if [[ "$STATUS_CODE" == "200" ]]; then
          echo "✅ Backend service is healthy and operational"
        else
          echo "⚠️ Backend service returned status $STATUS_CODE"
          echo "Service may still be starting up or experiencing issues"
        fi