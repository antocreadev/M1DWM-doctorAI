name: Backend CI/CD Pipeline

on:
  push:
    branches: [ main, lancementDB, jobs-deploy, jobs-deploy-test ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend.yml'

jobs:
  code:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8

    - name: Run linters
      run: |
        cd backend
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || true
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: code

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt

    - name: Set up Google Cloud SDK
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Configure Docker for GCP
      run: |
        gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev

    - name: Build Docker image
      run: |
        cd backend
        docker build -t ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/mediassist-images/backend:${{ github.sha }} .

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: build
    defaults:
      run:
        working-directory: ./backend

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install backend dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-flask
        pip install protobuf==3.20.3

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Run backend tests
      env:
        PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION: python
      run: |
        python -m pytest test_app.py -v

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Google Cloud SDK
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Configure Docker for GCP
      run: |
        gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev

    - name: Push Docker images
      run: |
        cd backend
        docker build -t ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/mediassist-images/backend:${{ github.sha }} .
        docker push ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/mediassist-images/backend:${{ github.sha }}

        # Tag as latest
        docker tag ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/mediassist-images/backend:${{ github.sha }} \
                  ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/mediassist-images/backend:latest
        docker push ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/mediassist-images/backend:latest

        echo "::set-output name=image::${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/mediassist-images/backend:${{ github.sha }}"

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: release

    steps:
    - name: Set up Google Cloud SDK
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Deploy to Cloud Run
      uses: google-github-actions/deploy-cloudrun@v1
      with:
        service: mediassist-backend-with-sql
        image: ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/mediassist-images/backend:${{ github.sha }}
        region: ${{ secrets.GCP_REGION }}
        allow_unauthenticated: true
        env_vars: |
          ENVIRONMENT=production
          GOOGLE_CLOUD_PROJECT=${{ secrets.GCP_PROJECT_ID }}
          OLLAMA_HOST=${{ secrets.OLLAMA_HOST }}
          INSTANCE_CONNECTION_NAME=${{ secrets.GCP_PROJECT_ID }}:${{ secrets.GCP_REGION }}:mediassist-db
          DB_USER=${{ secrets.DB_USER }}
          DB_PASS=${{ secrets.DB_PASS }}
          DB_NAME=${{ secrets.DB_NAME }}
          JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
          STORAGE_BUCKET=${{ secrets.STORAGE_BUCKET }}

  operate:
    name: Operate
    runs-on: ubuntu-latest
    needs: deploy

    steps:
    - name: Service Health Check
      run: |
        echo "Running post-deployment health check..."
        sleep 30  # Give the service a moment to stabilize
        URL=${{ secrets.URL }}/health
        STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" $URL || echo "failed")
        if [[ "$STATUS_CODE" == "200" ]]; then
          echo "✅ Backend service is healthy and operational"
        else
          echo "⚠️ Backend service returned status $STATUS_CODE"
          echo "Service may still be starting up or experiencing issues"
        fi

  monitor:
    name: Monitor
    runs-on: ubuntu-latest
    needs: operate

    steps:
    - name: Set up Google Cloud SDK
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Verify monitoring configuration
      run: |
        echo "Vérification de la configuration de monitoring..."

        # Vérifier que le service est bien en ligne et monitoré
        SERVICE_URL=${{ secrets.URL }}
        RESPONSE_CODE=$(curl -s -o /dev/null -w "%{http_code}" $SERVICE_URL/health || echo "failed")

        echo "Service status: $RESPONSE_CODE"
        if [[ "$RESPONSE_CODE" == "200" ]]; then
          echo "✅ Le service est en ligne et surveillé"

          # Vérifier les politiques d'alerte
          ALERT_POLICIES=$(gcloud alpha monitoring policies list --filter="display_name:MediAssist" --format="table(name,displayName)" 2>/dev/null || echo "Impossible de lister les politiques d'alerte")
          echo "Politiques d'alerte configurées:"
          echo "$ALERT_POLICIES"

          # Vérifier les canaux de notification
          CHANNELS=$(gcloud alpha monitoring channels list --filter="display_name:MediAssist" --format="table(name,displayName,type)" 2>/dev/null || echo "Impossible de lister les canaux de notification")
          echo "Canaux de notification configurés:"
          echo "$CHANNELS"

          echo ""
          echo "✅ Monitoring configuré avec succès"
          echo ""
          echo "Tableaux de bord: https://console.cloud.google.com/monitoring/dashboards?project=${{ secrets.GCP_PROJECT_ID }}"
          echo "Alertes: https://console.cloud.google.com/monitoring/alerting?project=${{ secrets.GCP_PROJECT_ID }}"
          echo "Métriques Cloud Run: https://console.cloud.google.com/run/detail/${{ secrets.GCP_REGION }}/mediassist-backend-with-sql/metrics?project=${{ secrets.GCP_PROJECT_ID }}"
        else
          echo "⚠️ Le service a retourné le code $RESPONSE_CODE - Vérifiez les alertes"
        fi
