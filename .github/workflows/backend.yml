name: Backend CI/CD Pipeline

on:
  push:
    branches: [ main, jobs-deploy ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend.yml'

env:
  PYTHON_VERSION: '3.10'
  GCP_REGION: ${{ secrets.GCP_REGION }}
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  IMAGE_NAME: backend
  SERVICE_NAME: mediassist-backend-with-sql

jobs:
  lint:
    name: Lint & Validate
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install flake8 black isort
      
      - name: Lint with flake8
        run: |
          cd backend
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      
      - name: Check formatting with black
        run: |
          cd backend
          black --check --diff .
        continue-on-error: true  # Don't fail the build for formatting issues
  
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Google Cloud SDK
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      
      - name: Configure Docker for GCP
        run: |
          gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev
      
      - name: Build and push Docker image
        id: build-image
        run: |
          cd backend
          
          # Build the Docker image with commit SHA tag
          docker build -t ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/mediassist-images/${{ env.IMAGE_NAME }}:${{ github.sha }} .
          
          # Also tag as latest
          docker tag ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/mediassist-images/${{ env.IMAGE_NAME }}:${{ github.sha }} \
                    ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/mediassist-images/${{ env.IMAGE_NAME }}:latest
          
          # Push both tags
          docker push ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/mediassist-images/${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker push ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/mediassist-images/${{ env.IMAGE_NAME }}:latest
          
          # Output the image URL for later use
          echo "IMAGE_URL=${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/mediassist-images/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT
    
    outputs:
      image_url: ${{ steps.build-image.outputs.IMAGE_URL }}
  
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/lancementDB'  # Only deploy to staging from lancementDB branch
    
    steps:
      - name: Set up Google Cloud SDK
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      
      - name: Deploy to Cloud Run (Staging)
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: ${{ env.SERVICE_NAME }}-staging
          image: ${{ needs.build.outputs.image_url }}
          region: ${{ env.GCP_REGION }}
          cloudsql_instances: ${{ env.GCP_PROJECT_ID }}:${{ env.GCP_REGION }}:mediassist-db
          service_account_email: cloudrun-service-account@${{ env.GCP_PROJECT_ID }}.iam.gserviceaccount.com
          env_vars: |
            ENVIRONMENT=staging
            GOOGLE_CLOUD_PROJECT=${{ env.GCP_PROJECT_ID }}
            OLLAMA_HOST=https://ollama-gemma-bv5bumqn3a-ew.a.run.app
            INSTANCE_CONNECTION_NAME=${{ env.GCP_PROJECT_ID }}:${{ env.GCP_REGION }}:mediassist-db
            DB_USER=postgres
            DB_PASS=${{ secrets.DB_PASSWORD }}
            DB_NAME=mediassist
            JWT_SECRET_KEY=${{ secrets.JWT_SECRET }}
            STORAGE_BUCKET=mediassist-prod-files
      
      - name: Post-deployment check
        run: |
          echo "Deployed backend to staging environment."
          echo "Running health check..."
          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://${{ env.SERVICE_NAME }}-staging-bv5bumqn3a-ew.a.run.app/health || echo "failed")
          if [[ "$STATUS_CODE" == "200" ]]; then
            echo "✅ Health check passed."
          else
            echo "⚠️ Health check returned status $STATUS_CODE. Check logs for details."
          fi
  
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'  # Only deploy to production from main branch
    
    steps:
      - name: Set up Google Cloud SDK
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      
      - name: Deploy to Cloud Run (Production)
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: ${{ env.SERVICE_NAME }}
          image: ${{ needs.build.outputs.image_url }}
          region: ${{ env.GCP_REGION }}
          cloudsql_instances: ${{ env.GCP_PROJECT_ID }}:${{ env.GCP_REGION }}:mediassist-db
          service_account_email: cloudrun-service-account@${{ env.GCP_PROJECT_ID }}.iam.gserviceaccount.com
          env_vars: |
            ENVIRONMENT=production
            GOOGLE_CLOUD_PROJECT=${{ env.GCP_PROJECT_ID }}
            OLLAMA_HOST=https://ollama-gemma-bv5bumqn3a-ew.a.run.app
            INSTANCE_CONNECTION_NAME=${{ env.GCP_PROJECT_ID }}:${{ env.GCP_REGION }}:mediassist-db
            DB_USER=postgres
            DB_PASS=${{ secrets.DB_PASSWORD }}
            DB_NAME=mediassist
            JWT_SECRET_KEY=${{ secrets.JWT_SECRET }}
            STORAGE_BUCKET=mediassist-prod-files
      
      - name: Post-deployment check
        run: |
          echo "Deployed backend to production environment."
          echo "Running health check..."
          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://${{ env.SERVICE_NAME }}-bv5bumqn3a-ew.a.run.app/health || echo "failed")
          if [[ "$STATUS_CODE" == "200" ]]; then
            echo "✅ Health check passed."
          else
            echo "⚠️ Health check returned status $STATUS_CODE. Check logs for details."
          fi