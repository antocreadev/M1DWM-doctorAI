name: Frontend CI/CD Pipeline

on:
  push:
    branches: [ main, lancementDB, jobs-deploy ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend.yml'

jobs:
  code:
    name: Code Quality
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Run linters
        run: bun run lint || echo "Lint warnings ignored"

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: code

    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Build application
        run: bun run build

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: build

    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Generate package-lock.json for Cypress
        run: bun x npm install --package-lock-only

      - name: Run conventional tests
        run: |
          if grep -q '"test":' package.json; then
            echo "Running conventional tests..."
            bun test || echo "‚ö†Ô∏è Tests failed but continuing"
          else
            echo "‚úÖ No test script found in package.json"
          fi

      - name: Run Cypress tests
        uses: cypress-io/github-action@v6
        with:
          working-directory: frontend
          build: bun run build
          start: bun run start
          wait-on: 'http://localhost:3000'
          browser: chrome
          headed: false
          spec: cypress/e2e/auth/**/*.cy.ts
        continue-on-error: false

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: test

    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Build application for release
        run: bun run build

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker for GCP
        run: gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/mediassist-images/frontend:${{ github.sha }} .
          docker push ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/mediassist-images/frontend:${{ github.sha }}

          docker tag ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/mediassist-images/frontend:${{ github.sha }} \
                     ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/mediassist-images/frontend:latest
          docker push ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/mediassist-images/frontend:latest

  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: release

    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Deploy Frontend to Cloud Run
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: mediassist-frontend
          image: ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/mediassist-images/frontend:${{ github.sha }}
          region: ${{ secrets.GCP_REGION }}
          env_vars: |
            NODE_ENV=production
            NEXT_PUBLIC_API_URL=https://mediassist-backend-with-sql-bv5bumqn3a-ew.a.run.app

  operate:
    name: Post-Deployment Health Check
    runs-on: ubuntu-latest
    needs: deploy

    steps:
      - name: Check Frontend Accessibility
        run: |
          echo "üîç Running health check..."
          sleep 30
          URL="https://mediassist-frontend-bv5bumqn3a-ew.a.run.app"
          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" $URL || echo "failed")
          if [[ "$STATUS_CODE" == "200" ]]; then
            echo "‚úÖ Frontend is operational"
          else
            echo "‚ùå Frontend returned status $STATUS_CODE"
            exit 1
          fi
